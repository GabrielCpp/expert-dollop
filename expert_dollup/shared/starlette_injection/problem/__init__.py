import http.client as httplib

# From https://github.com/cbornet/python-httpproblem/blob/master/httpproblem/problem.py
def problem(status=None, title=None, detail=None, type=None, instance=None, **kwargs):
    """
    Returns a dict with the problem fields sanitized
    :param status: The HTTP status code generated by the origin server for this occurrence of the problem.
    :type status: int
    :param title: A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to
                  occurrence of the problem, except for purposes of localisation.
    :type title: str
    :param detail: An human readable explanation specific to this occurrence of the problem.
    :type detail: str
    :param type: An absolute URI that identifies the problem type.  When dereferenced, it SHOULD provide
                 human-readable documentation for the problem type (e.g., using HTML).  When this member is not
                 present its value is assumed to be "about:blank".
    :type: type: str
    :param instance: An absolute URI that identifies the specific occurrence of the problem.  It may or may not
                     yield further information if dereferenced.
    :type instance: str
    :return the problem in dict form
    :rtype dict
    """
    problem_dict = {}
    if status:
        problem_dict["status"] = int(status)
        if (not title or title == "about:blank") and status in httplib.responses:
            problem_dict["title"] = httplib.responses[status]
    if title:
        problem_dict["title"] = str(title)
    if detail:
        problem_dict["detail"] = str(detail)
    if type:
        problem_dict["type"] = str(type)
    if instance:
        problem_dict["instance"] = str(instance)
    problem_dict.update(kwargs)
    return problem_dict
