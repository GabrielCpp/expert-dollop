type DatasheetDefinitionPropertySchemaDict {
    name: String!
    schema: String!
}

type DatasheetDefinition {
    id: ID!
    name: String!
    elementPropertiesSchema: DatasheetDefinitionPropertySchemaDict
    elementsDefinition(first: Int!, after: String): DatasheetDefinitionElementConnection
}

type DatasheetDefinitionElementEdge {
    node: DatasheetDefinitionElement!
    cursor: String!
}

type DatasheetDefinitionElementConnection {
    edges: [DatasheetDefinitionElement!]!
    pageInfo: PageInfo!
}

type DatasheetDefinitionElementProperty {
    is_readonly: Boolean!
    value: String!
}

type DatasheetDefinitionElementPropertyDict {
    name: String!
    property: DatasheetDefinitionElementProperty!
}

type DatasheetDefinitionElement {
    id: ID!
    unitId: String!
    isCollection: Boolean!
    datasheetDefId: String!
    datasheetDefinition: DatasheetDefinition
    orderIndex: Int!
    name: String!
    defaultProperties: DatasheetDefinitionElementPropertyDict
    tags: [String!]!
    creationDateUtc: String!

}

type DatasheetElement {
    datasheetId: String!
    elementDefId: String!
    elementDefinition: DatasheetDefinitionElement!
    childElementReference: ID!
    properties: String!
    originalDatasheetId: String!
    creationDateUtc: String!
} 

type DatasheetElementEdge {
    node: DatasheetElement!
    cursor: String!
}

type DatasheetElementConnection {
    edges: [DatasheetElementEdge!]!
    pageInfo: PageInfo!
}

type Datasheet {
    id: ID!
    name: String!
    isStaged: Boolean!
    datasheetDefId: ID!
    fromDatasheetId: ID!
    elements(first: Int!, after: String): DatasheetElementConnection
}

type ProjectDefinitionValueType {
    id: ID!
    valueJsonSchema: String!
    attributesJsonSchema: String!
    displayName: String!
}

type JsonSchema {
    type: String
    enum: [String!]
    minLength: Int
    maxLength: Int
    minimum: Float
    maximum: Float
}

type IntFieldConfig {
    validator: JsonSchema!
}

type DecimalFieldConfig {
    validator: JsonSchema!
    precision: Int!
}

type StringFieldConfig {
    validator: JsonSchema!
    transforms: [String!]!
}

type BoolFieldConfig {
    validator: JsonSchema!
}

type StaticChoiceOption {
    id: String!
    label: String!
    help_text: String!
}

type StaticChoiceFieldConfig {
    validator: JsonSchema!
    options: [StaticChoiceOption!]!
}

type CollapsibleContainerFieldConfig {
    isCollapsible: Boolean!
}

union NodeConfigValueType = IntFieldConfig | DecimalFieldConfig | StringFieldConfig | BoolFieldConfig | StaticChoiceFieldConfig | CollapsibleContainerFieldConfig

type NodeConfig {
    valueType: NodeConfigValueType
}
    
type IntFieldValue {
    integer: Int!
}

type DecimalFieldValue {
    numeric: Float!
}

type StringFieldValue {
    text: String!
}

type BoolFieldValue {
    enabled: Boolean!
}

union FieldValue = IntFieldValue | DecimalFieldValue | StringFieldValue | BoolFieldValue

input JsonSchemaInput {
    input: String
    enum: [String!]
    minLength: Int
    maxLength: Int
    minimum: Float
    maximum: Float
}

input IntFieldConfigInput {
    validator: JsonSchemaInput!
}

input DecimalFieldConfigInput {
    validator: JsonSchemaInput!
    precision: Int!
}

input StringFieldConfigInput {
    validator: JsonSchemaInput!
    transforms: [String!]!
}

input BoolFieldConfigInput {
    validator: JsonSchemaInput!
}

input StaticChoiceOptionInput {
    id: String!
    label: String!
    help_text: String!
}

input StaticChoiceFieldConfigInput {
    validator: JsonSchemaInput!
    options: [StaticChoiceOptionInput!]!
}

input CollapsibleContainerFieldConfigInput {
    isCollapsible: Boolean!
}

input NodeConfigValueTypeInput {
    kind: String!
    int: IntFieldConfigInput 
    decimal: DecimalFieldConfigInput
    string: StringFieldConfigInput
    bool: BoolFieldConfigInput
    staticChoice: StaticChoiceFieldConfigInput
    collapsibleContainer: CollapsibleContainerFieldConfigInput
}

input NodeConfigInput {
    valueType: NodeConfigValueTypeInput!
}
    
input IntFieldValueInput {
    integer: Int!
}

input DecimalFieldValueInput {
    numeric: Float!
}

input StringFieldValueInput {
    text: String!
}

input BoolFieldValueInput {
    enabled: Boolean!
}

input FieldValueInput {
    kind: String!
    int: IntFieldValueInput
    decimal: DecimalFieldValueInput
    string: StringFieldValueInput
    bool: BoolFieldValueInput
}

input ProjectDefinitionNodeInput {
    id: ID!
    projectDefId: String!
    name: String!
    isCollection: Boolean!
    instanciateByDefault: Boolean!
    orderIndex: Int!
    config: NodeConfigInput
    valueType: String!
    defaultValue: FieldValueInput
    path: [String!]!
}

type ProjectDefinitionNode {
    id: ID!
    projectDefId: String!
    name: String!
    isCollection: Boolean!
    instanciateByDefault: Boolean!
    orderIndex: Int!
    config: NodeConfig
    valueType: String!
    valueTypeDetails: ProjectDefinitionValueType!
    defaultValue: FieldValue
    path: [String!]!
    children: [ProjectDefinitionNode!]!
}

type ProjectDefinitionTreeNode {
    definition: ProjectDefinitionNode
    children: [ProjectDefinitionTreeNode!]!
}

type ProjectDefinitionNodeTree {
    roots: [ProjectDefinitionTreeNode!]!
}

type ProjectDefinition {
    id: ID!
    name: String!
    defaultDatasheetId: String!
    defaultDatasheet: Datasheet!
    datasheetDefId: String!
    datasheetDefinition: DatasheetDefinition!
    rootSections(projectDefId: ID!): ProjectDefinitionNodeTree!
    rootSectionContainers(projectDefId: ID!, rootSectionId: ID!): ProjectDefinitionNodeTree!
    formContent(projectDefId: ID!, formId: ID!): ProjectDefinitionNodeTree!
}

type Project {
    id: ID!
    name: String!
    isStaged: Boolean
    projectDefId: String!
    projectDefinition: ProjectDefinition!
    datasheetId: String!
    datasheet: Datasheet!
}

type Translation {
    id: ID!
    ressourceId: String!
    locale: String!
    scope: String!
    name: String!
    value: String!
}

type TranslationEdge {
    node: Translation!
    cursor: String!
}

type TranslationConnection {
    edges: [TranslationEdge!]!
    pageInfo: PageInfo!
}

type PageInfo {
    hasNextPage: Boolean
    endCursor: String!
}

type Query {
    findDatasheet(id: ID!): Datasheet!
    findProjectDefinition(id: ID!): ProjectDefinition!
    findProjectDefinitionRootSections(projectDefId: ID!): ProjectDefinitionNodeTree!
    findProjectDefinitionRootSectionContainers(projectDefId: ID!, rootSectionId: ID!): ProjectDefinitionNodeTree!
    findProjectDefinitionFormContent(projectDefId: ID!, formId: ID!): ProjectDefinitionNodeTree!
    findRessourceTranslation(ressourceId: ID!, language: String!): TranslationConnection!
}

input TranslationInput {
    ressourceId: String!
    locale: String!
    scope: String!
    name: String!
    value: String!
}

type Mutation {
    addTranslations(translations: [TranslationInput!]!): [Translation!]!
    addProjectDefinitionNode(node: ProjectDefinitionNodeInput!): ProjectDefinitionNode!
}

schema {
  query: Query
  mutation: Mutation
}

