scalar JsonSchema

type DatasheetDefinitionPropertySchema {
  valueValidator: JsonSchema!
}

type DatasheetDefinitionPropertySchemaDict {
  name: String!
  schema: DatasheetDefinitionPropertySchema!
}

type DatasheetDefinitionElementEdge {
  node: DatasheetDefinitionElement!
  cursor: String!
}

type DatasheetDefinitionElementConnection {
  edges: [DatasheetDefinitionElementEdge!]!
  pageInfo: PageInfo!
}

type DatasheetDefinitionElementProperty {
  isReadonly: Boolean!
  value: String!
}

type DatasheetDefinitionElementPropertyDict {
  name: String!
  property: DatasheetDefinitionElementProperty!
}

type DatasheetDefinitionElement {
  id: ID!
  unitId: String!
  isCollection: Boolean!
  projectDefinitionId: String!
  projectDefinition: ProjectDefinition
  orderIndex: Int!
  name: String!
  defaultProperties: [DatasheetDefinitionElementPropertyDict!]!
  tags: [String!]!
  creationDateUtc: String!
}

type DatasheetElement {
  datasheetId: String!
  elementDefId: String!
  elementDefinition: DatasheetDefinitionElement!
  childElementReference: ID!
  properties: String!
  originalDatasheetId: String!
  creationDateUtc: String!
}

type DatasheetElementEdge {
  node: DatasheetElement!
  cursor: String!
}

type DatasheetElementConnection {
  edges: [DatasheetElementEdge!]!
  pageInfo: PageInfo!
}

type Datasheet {
  id: ID!
  name: String!
  isStaged: Boolean!
  projectDefinitionId: String!
  fromDatasheetId: String
  elements(first: Int!, after: String): DatasheetElementConnection!
}

type DatasheetEdge {
  node: Datasheet!
  cursor: String!
}

type DatasheetConnection {
  edges: [DatasheetEdge!]!
  pageInfo: PageInfo!
}

type IntFieldConfig {
  unit: String!
}

type DecimalFieldConfig {
  unit: String!
  precision: Int!
}

type StringFieldConfig {
  transforms: [String!]!
}

type BoolFieldConfig {
  isCheckbox: Boolean!
}

type StaticChoiceOption {
  id: String!
  label: String!
  helpText: String!
}

type StaticChoiceFieldConfig {
  options: [StaticChoiceOption!]!
}

type CollapsibleContainerFieldConfig {
  isCollapsible: Boolean!
}

type StaticNumberFieldConfig {
  passToTranslation: Boolean!
  precision: Int!
  unit: String!
}

union FieldDetailsUnion =
    IntFieldConfig
  | DecimalFieldConfig
  | StringFieldConfig
  | BoolFieldConfig
  | StaticChoiceFieldConfig
  | CollapsibleContainerFieldConfig
  | StaticNumberFieldConfig

type TranslationConfig {
  helpTextName: String!
  label: String
}

type TriggerParam {
  name: String!
  value: String!
}

enum TriggerAction {
  CHANGE_NAME
  SET_VISIBILITY
}

type Trigger {
  action: TriggerAction!
  targetTypeId: String!
  params: [TriggerParam!]!
}

type NodeMetaConfig {
  isVisible: Boolean
}

type NodeConfig {
  fieldDetails: FieldDetailsUnion
  valueValidator: JsonSchema
  triggers: [Trigger]!
  translations: TranslationConfig!
  meta: NodeMetaConfig
}

type IntFieldValue {
  integer: Int!
}

type DecimalFieldValue {
  numeric: Float!
}

type StringFieldValue {
  text: String!
}

type ReferenceId {
  uuid: String!
}


type BoolFieldValue {
  enabled: Boolean!
}

union FieldValue = IntFieldValue
  | DecimalFieldValue
  | StringFieldValue
  | BoolFieldValue
  | ReferenceId

input IntFieldConfigInput {
  validator: JsonSchema!
}

input DecimalFieldConfigInput {
  validator: JsonSchema!
  precision: Int!
}

input StringFieldConfigInput {
  validator: JsonSchema!
  transforms: [String!]!
}

input BoolFieldConfigInput {
  validator: JsonSchema!
}

input StaticChoiceOptionInput {
  id: String!
  label: String!
  helpText: String!
}

input StaticChoiceFieldConfigInput {
  validator: JsonSchema!
  options: [StaticChoiceOptionInput!]!
}

input CollapsibleContainerFieldConfigInput {
  isCollapsible: Boolean!
}

input StaticNumberFieldConfigInput {
  passToTranslation: Boolean!
  precision: Int!
  unit: String!
}

enum FieldDetailsType {
  INT_FIELD_CONFIG
  DECIMAL_FIELD_CONFIG
  STRING_FIELD_CONFIG
  BOOL_FIELD_CONFIG
  STATIC_CHOICE_FIELD_CONFIG
  COLLAPSIBLE_CONTAINER_FIELD_CONFIG
  STATIC_NUMBER_FIELD_CONFIG
}

input FieldDetailsUnionInput {
  kind: FieldDetailsType!
  int: IntFieldConfigInput
  decimal: DecimalFieldConfigInput
  string: StringFieldConfigInput
  bool: BoolFieldConfigInput
  staticChoice: StaticChoiceFieldConfigInput
  collapsibleContainer: CollapsibleContainerFieldConfigInput
  staticNumberFieldConfig: StaticNumberFieldConfigInput
}

input NodeConfigInput {
  fieldDetails: FieldDetailsUnionInput
  valueValidator: JsonSchema
}

input IntFieldValueInput {
  integer: Int!
}

input DecimalFieldValueInput {
  numeric: Float!
}

input StringFieldValueInput {
  text: String!
}

input BoolFieldValueInput {
  enabled: Boolean!
}

enum FieldValueType {
  INT_FIELD_VALUE
  DECIMAL_FIELD_VALUE
  STRING_FIELD_VALUE
  BOOL_FIELD_VALUE
}

input FieldValueInput {
  kind: FieldValueType!
  int: IntFieldValueInput
  decimal: DecimalFieldValueInput
  string: StringFieldValueInput
  bool: BoolFieldValueInput
}

input ProjectDefinitionNodeInput {
  id: ID!
  name: String!
  isCollection: Boolean!
  instanciateByDefault: Boolean!
  orderIndex: Int!
  config: NodeConfigInput!
  defaultValue: FieldValueInput
  path: [String!]!
}

type ProjectDefinitionNode {
  id: ID!
  projectDefinitionId: String!
  name: String!
  isCollection: Boolean!
  instanciateByDefault: Boolean!
  orderIndex: Int!
  config: NodeConfig!
  defaultValue: FieldValue
  path: [String!]!
  children: [ProjectDefinitionNode!]!
  translations: [Translation!]!
}

type ProjectDefinitionTreeNode {
  definition: ProjectDefinitionNode!
  children: [ProjectDefinitionTreeNode!]!
}

type ProjectDefinitionNodeTree {
  roots: [ProjectDefinitionTreeNode!]!
}

type ProjectDefinition {
  id: ID!
  name: String!
  defaultDatasheetId: String!
  defaultDatasheet: Datasheet!
  projectDefinitionId: String!
  projectDefinition: ProjectDefinition!
  rootSections(projectDefinitionId: ID!): ProjectDefinitionNodeTree!
  rootSectionContainers(
    projectDefinitionId: ID!
    rootSectionId: ID!
  ): ProjectDefinitionNodeTree!
  formContent(projectDefinitionId: ID!, formId: ID!): ProjectDefinitionNodeTree!
  properties: [DatasheetDefinitionPropertySchemaDict!]!
  elementsDefinition(
    first: Int!
    after: String
  ): DatasheetDefinitionElementConnection
}

type ProjectDefinitionEdge {
  node: ProjectDefinition!
  cursor: String!
}

type ProjectDefinitionConnection {
  edges: [ProjectDefinitionEdge!]!
  pageInfo: PageInfo!
}

type Formula {
  id: ID!
  projectDefinitionId: String!
  attachedToTypeId: String!
  name: String!
  expression: String!
}

type FormulaEdge {
  node: Formula!
  cursor: String!
}

type FormulaConnection {
  edges: [FormulaEdge!]!
  pageInfo: PageInfo!
}

type ProjectEdge {
  node: ProjectDetails!
  cursor: String!
}

type ProjectConnection {
  edges: [ProjectEdge!]!
  pageInfo: PageInfo!
}

type ProjectNode {
  id: ID!
  projectId: String!
  typePath: [String!]!
  typeId: String!
  typeName: String!
  path: [String!]!
  value: FieldValue
  label: String
}

type ProjectDetails {
  id: ID!
  name: String!
  isStaged: Boolean
  projectDefinitionId: String!
  projectDefinition: ProjectDefinition!
  datasheetId: String!
  datasheet: Datasheet!
  reportDefinitions: [ReportDefinition!]!
}

input ProjectDetailsInput {
  id: ID!
  name: String!
  projectDefinitionId: String!
  datasheetId: String!
}

type ProjectNodeMeta {
  definition: ProjectDefinitionNode!
  state: ProjectNodeMetaState!
  typeId: ID!
}

type ProjectNodeMetaState {
  isVisible: Boolean
  selectedChild: String
}

type ProjectNodeTreeNode {
  node: ProjectNode!
  children: [ProjectNodeTreeTypeNode!]!
}

type ProjectNodeTreeTypeNode {
  definition: ProjectDefinitionNode!
  state: ProjectNodeMetaState!
  nodes: [ProjectNodeTreeNode!]!
}

type ProjectNodeTree {
  roots: [ProjectNodeTreeTypeNode!]!
}

type AttributeBucket {
  bucketName: String!
  attributeName: String!
}

type ReportComputation {
  name: String!
  expression: String!
  isVisible: Boolean!
  unitId: String
}

type ReportDefinitionStructure {
  formulaAttribute: AttributeBucket!
  datasheetAttribute: AttributeBucket!
  columns: [ReportComputation!]!
}

type ReportDefinition {
    id: String!
    projectDefinitionId: String!
    name: String!
    structure: ReportDefinitionStructure!
}

type ReportColumn {
  value: FieldValue!
  unit: String
}

type ReportRow {
    nodeId: String!
    formulaId: String!
    elementDefId: String!
    childReferenceId: String!
    columns: [ReportColumn!]!
}

type ComputedValue {
    label: String!
    value: FieldValue!
    unit: String
}

type ReportStage {
  summary: ComputedValue!
  rows: [ReportRow!]!
}

type Report {
  stages: [ReportStage!]!
  creationDateUtc: String
  summaries: [ComputedValue!]!
}

type SuppliedItem {
  datasheetId: String!
  elementDefId: String!
  childReferenceId: String!
  organisationId: String!
}

type DistributableItem { 
  projectId: String!
  reportDefinitionId: String!
  nodeId: String!
  formulaId: String!
  suppliedItem: SuppliedItem!
  distribution_ids: [String!]!
  summary: ComputedValue!
  columns: [ComputedValue!]!
  obsolete: Boolean!
  creationDateUtc: String!
}

type Translation {
  id: ID!
  ressourceId: String!
  locale: String!
  scope: String!
  name: String!
  value: String!
}

type TranslationEdge {
  node: Translation!
  cursor: String!
}

type TranslationConnection {
  edges: [TranslationEdge!]!
  pageInfo: PageInfo!
}

type PageInfo {
  hasNextPage: Boolean!
  endCursor: String!
  totalCount: Int!
}

type User {
    oauthId: ID!
    id: String!
    email: String!
    permissions: [String!]!
    organisationId: String!
}

input NewSingleUserOrganisationInput {
    organisationName: String!
    email: String!
}

type Query {
  currentUser: User
  findDatasheet(id: ID!): Datasheet!
  findDatasheets(
    query: String!
    first: Int!
    after: String
  ): DatasheetConnection!
  findDatasheetDefinitionElements(
    projectDefinitionId: ID!
    first: Int!
    after: String
  ): DatasheetDefinitionElementConnection!
  queryDatasheetDefinitionElements(
    projectDefinitionId: ID!
    query: String!
    first: Int!
    after: String
  ): DatasheetDefinitionElementConnection!
  findProjectDefinition(id: ID!): ProjectDefinition!
  findProjectDefinitionRootSections(
    projectDefinitionId: ID!
  ): ProjectDefinitionNodeTree!
  findProjectDefinitionRootSectionContainers(
    projectDefinitionId: ID!
    rootSectionId: ID!
  ): ProjectDefinitionNodeTree!
  findProjectDefinitionFormContent(
    projectDefinitionId: ID!
    formId: ID!
  ): ProjectDefinitionNodeTree!
  findProjectDefinitionNode(projectDefinitionId: ID!, id: ID!): ProjectDefinitionNode!
  findRessourceTranslation(
    ressourceId: ID!
    language: String!
  ): TranslationConnection!
  findProjectDefintions(
    query: String!
    first: Int!
    after: String
  ): ProjectDefinitionConnection!
  findProjectRootSections(projectId: ID!): ProjectNodeTree!
  findProjectRootSectionContainers(
    projectId: ID!
    rootSectionId: ID!
  ): ProjectNodeTree!
  findProjectNodeMetaDefinition(projectId: ID!, nodeId: ID!): ProjectNodeMeta!
  findProjectFormContent(projectId: ID!, formId: ID!): ProjectNodeTree!
  findProjects(query: String!, first: Int!, after: String): ProjectConnection!
  findProjectDetails(id: ID!): ProjectDetails!
  findProjectDefinitionFormulas(
    projectDefinitionId: ID!
    query: String!
    first: Int!
    after: String
  ): FormulaConnection!
  findReportDefinitions(projectDefinitionId: ID!): [ReportDefinition!]!
  findReportDefinition(reportDefinitionId: ID!): ReportDefinition!
  findProjectReport(projectId: ID!, reportDefinitionId: ID!): Report!

  # CommandOrder
  findDistributables(projectId: ID!): [ReportDefinition!]!
  findDistributableItems(projectId: ID!, reportDefinitionId: ID!): [DistributableItem!]!
}

input TranslationInput {
  ressourceId: String!
  scope: String!
  locale: String!
  name: String!
  value: String!
}

input TranslationUpdateInput {
  id: ID!
  ressourceId: String!
  scope: String!
  locale: String!
  name: String!
  value: String!
}

input FieldUpdateInput {
    nodeId: ID!
    value: FieldValueInput!
}

input ProjectNodeCollectionTargetInput {
    parentNodeId: String
    collectionTypeId: String!
}

input DatasheetInput {
  name: String! 
  projectDefinitionId: String!
  fromDatasheetId: String
}

type Mutation {
  # Translations
  addTranslations(translations: [TranslationInput!]!): [Translation!]!
  updateTranslations(translations: [TranslationUpdateInput!]!): [Translation!]!

  # ProjectDefinitionNode
  addProjectDefinitionNode(
    node: ProjectDefinitionNodeInput!
  ): ProjectDefinitionNode!

  # ProjectNode
  updateProjectField(
    projectId: ID!
    nodeId: ID!
    value: FieldValueInput!
  ): ProjectNode!
  updateProjectFields(
    projectId: ID!
    updates: [FieldUpdateInput!]!
  ): [ProjectNode]!

  deleteProjectCollection(projectId: ID!, collectionNodeId: ID!): ProjectNode!
  cloneProjectCollection(projectId: ID!, collectionNodeId: ID!): [ProjectNode!]!
  addProjectCollectionItem(projectId: ID!, collectionTarget: ProjectNodeCollectionTargetInput!): [ProjectNode!]!

  # Project
  createProject(projectDetails: ProjectDetailsInput): ProjectDetails!

  # Datasheet
  createDatasheet(datasheet: DatasheetInput): Datasheet!

  # User
  createSingleUserOrganisation(singleUserOrganisation: NewSingleUserOrganisationInput!): User!

}

schema {
  query: Query
  mutation: Mutation
}
