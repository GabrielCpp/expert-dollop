scalar JsonSchema
scalar UUID

type Unit {
  id: ID!
}

type AggregateAttribute {
  name: String!
  isReadonly: Boolean!
  value: PrimitiveWithReferenceUnion!
}

input AggregateAttributeInput {
  name: String!
  isReadonly: Boolean!
  value: FieldValueInput!
}

type Aggregate {
  id: ID!
  projectDefinitionId: String!
  collectionId: String!
  name: String!
  translated: [Translation!]!
  ordinal: Int!
  isExtendable: Boolean!
  attributes: [AggregateAttribute!]!
}

type AggregateConnection {
  edges: [AggregateEdge!]!
  pageInfo: PageInfo!
}

type AggregateEdge {
  node: Aggregate!
  cursor: String!
}

input AggregateInput {
  name: String!
  ordinal: Int!
  isExtendable: Boolean!
  attributes: [AggregateAttributeInput!]!
  translated: [TranslationInput!]!
}

enum NodeType {
  FORMULA
  FIELD
  SECTION
  FORM
  SUB_SECTION
  ROOT_SECTION
}

type NodeReferenceConfig {
  nodeType: NodeType!
}

input NodeReferenceConfigInput {
  nodeType: NodeType!
}

union AttributeDetailsUnion =
    IntFieldConfig
  | DecimalFieldConfig
  | StringFieldConfig
  | BoolFieldConfig
  | StaticChoiceFieldConfig
  | AggregateReferenceConfig
  | NodeReferenceConfig

enum AttributeDetailsEnum {
  INT_FIELD_CONFIG
  DECIMAL_FIELD_CONFIG
  STRING_FIELD_CONFIG
  BOOL_FIELD_CONFIG
  STATIC_CHOICE_FIELD_CONFIG
  AGGREGATE_REFERENCE_CONFIG
  NODE_REFERENCE_CONFIG
}

input AttributeDetailsUnionInput {
  kind: AttributeDetailsEnum!
  int: IntFieldConfigInput
  decimal: DecimalFieldConfigInput
  string: StringFieldConfigInput
  bool: BoolFieldConfigInput
  staticChoice: StaticChoiceFieldConfigInput
  aggregateReference: AggregateReferenceConfigInput
  nodeReference: NodeReferenceConfigInput
}

type AggregateAttributeSchema {
  name: String!
  translations: TranslationConfig!
  details: AttributeDetailsUnion!
}

input AggregateAttributeSchemaInput {
  name: String!
  details: AttributeDetailsUnionInput!
}

type AggregateCollection {
  id: String!
  projectDefinitionId: String!
  name: String!
  isAbstract: Boolean!
  attributesSchema: [AggregateAttributeSchema!]!
  translated: [Translation!]!
}

input AggregateCollectionInput {
  name: String!
  isAbstract: Boolean!
  attributesSchema: [AggregateAttributeSchemaInput!]!
}

type InstanceSchema {
  id: ID!
  isExtendable: Boolean!
  attributesSchema: [AggregateAttribute!]!
}

type Attribute {
  name: String!
  value: PrimitiveWithReferenceUnion
}

type DatasheetElement {
  id: ID!
  datasheetId: String!
  aggregateId: String!
  schema: InstanceSchema!
  attributes: [Attribute!]!
  originalDatasheetId: String!
  originalOwnerOrganizationId: String!
  creationDateUtc: String!
}

type DatasheetElementEdge {
  node: DatasheetElement!
  cursor: String!
}

type DatasheetElementConnection {
  edges: [DatasheetElementEdge!]!
  pageInfo: PageInfo!
}

type Datasheet {
  id: ID!
  name: String!
  projectDefinitionId: String!
  fromDatasheetId: String!
  elements(first: Int!, after: String): DatasheetElementConnection!
}

type DatasheetEdge {
  node: Datasheet!
  cursor: String!
}

type DatasheetConnection {
  edges: [DatasheetEdge!]!
  pageInfo: PageInfo!
}

type IntFieldConfig {
  unit: String!
  integer: Int!
}

type DecimalFieldConfig {
  unit: String!
  precision: Int!
  numeric: Float!
}

type StringFieldConfig {
  transforms: [String!]!
  text: String!
}

type BoolFieldConfig {
  enabled: Boolean!
}

type StaticChoiceOption {
  id: String!
  label: String!
  helpText: String!
}

type StaticChoiceFieldConfig {
  options: [StaticChoiceOption!]!
  selected: String!
}

type AggregateReferenceConfig {
  fromCollection: String!
}

input AggregateReferenceConfigInput {
  fromCollection: String!
}

type CollapsibleContainerFieldConfig {
  isCollapsible: Boolean!
}

type StaticNumberFieldConfig {
  passToTranslation: Boolean!
  precision: Int!
  unit: String!
}

union FieldDetailsUnion =
    IntFieldConfig
  | DecimalFieldConfig
  | StringFieldConfig
  | BoolFieldConfig
  | StaticChoiceFieldConfig
  | CollapsibleContainerFieldConfig
  | StaticNumberFieldConfig

type TranslationConfig {
  helpTextName: String!
  label: String!
}

input TranslationConfigInput {
  helpTextName: String!
  label: String!
}

type TriggerParam {
  name: String!
  value: String!
}

enum TriggerAction {
  CHANGE_NAME
  SET_VISIBILITY
}

type Trigger {
  action: TriggerAction!
  targetTypeId: String!
  params: [TriggerParam!]!
}

input TriggerParamInput {
  name: String!
  value: String!
}

input TriggerInput {
  action: TriggerAction!
  targetTypeId: String!
  params: [TriggerParamInput!]!
}

type NodeMetaConfig {
  isVisible: Boolean!
}

input NodeMetaConfigInput {
  isVisible: Boolean!
}

type IntFieldValue {
  integer: Int!
}

type DecimalFieldValue {
  numeric: Float!
}

type StringFieldValue {
  text: String!
}

type ReferenceId {
  uuid: String!
}

type BoolFieldValue {
  enabled: Boolean!
}

union PrimitiveWithReferenceUnion =
    IntFieldValue
  | DecimalFieldValue
  | StringFieldValue
  | BoolFieldValue
  | ReferenceId

input IntFieldConfigInput {
  integer: Int!
  unit: String!
}

input DecimalFieldConfigInput {
  precision: Int!
  numeric: Float!
  unit: String
}

input StringFieldConfigInput {
  transforms: [String!]!
  text: String!
}

input BoolFieldConfigInput {
  enabled: Boolean!
}

input StaticChoiceOptionInput {
  id: String!
  label: String!
  helpText: String!
  translated: [TranslationInput!]!
}

input StaticChoiceFieldConfigInput {
  options: [StaticChoiceOptionInput!]!
  selected: String!
}

input CollapsibleContainerFieldConfigInput {
  isCollapsible: Boolean!
}

input StaticNumberFieldConfigInput {
  passToTranslation: Boolean!
  precision: Int!
  unit: String!
}

enum FieldDetailsType {
  INT_FIELD_CONFIG
  DECIMAL_FIELD_CONFIG
  STRING_FIELD_CONFIG
  BOOL_FIELD_CONFIG
  STATIC_CHOICE_FIELD_CONFIG
  COLLAPSIBLE_CONTAINER_FIELD_CONFIG
  STATIC_NUMBER_FIELD_CONFIG
}

input FieldDetailsUnionInput {
  kind: FieldDetailsType!
  int: IntFieldConfigInput
  decimal: DecimalFieldConfigInput
  string: StringFieldConfigInput
  bool: BoolFieldConfigInput
  staticChoice: StaticChoiceFieldConfigInput
  collapsibleContainer: CollapsibleContainerFieldConfigInput
  staticNumberFieldConfig: StaticNumberFieldConfigInput
}

input IntFieldValueInput {
  integer: Int!
}

input DecimalFieldValueInput {
  numeric: Float!
}

input StringFieldValueInput {
  text: String!
}

input BoolFieldValueInput {
  enabled: Boolean!
}

input ReferenceFieldValueInput {
  uuid: String!
}

enum FieldValueType {
  INT_FIELD_VALUE
  DECIMAL_FIELD_VALUE
  STRING_FIELD_VALUE
  BOOL_FIELD_VALUE
  REFERENCE_FIELD_VALUE
}

input FieldValueInput {
  kind: FieldValueType!
  int: IntFieldValueInput
  decimal: DecimalFieldValueInput
  string: StringFieldValueInput
  bool: BoolFieldValueInput
  reference: ReferenceFieldValueInput
}

input ProjectDefinitionNodeCreationInput {
  name: String!
  isCollection: Boolean!
  instanciateByDefault: Boolean!
  ordinal: Int!
  path: [String!]!
  translations: TranslationConfigInput!
  fieldDetails: FieldDetailsUnionInput
  triggers: [TriggerInput!]!
  meta: NodeMetaConfigInput!
  translated: [TranslationInput!]!
}

type CoreDefinitionNode {
  id: ID!
  projectDefinitionId: String!
  name: String!
  path: [String!]!
}

type CoreDefinitionNodeEdge {
  node: CoreDefinitionNode!
  cursor: String!
}

type CoreDefinitionNodeConnection {
  edges: [CoreDefinitionNodeEdge!]!
  pageInfo: PageInfo!
}

type ProjectDefinitionNode {
  id: ID!
  projectDefinitionId: String!
  name: String!
  isCollection: Boolean!
  instanciateByDefault: Boolean!
  ordinal: Int!
  fieldDetails: FieldDetailsUnion
  triggers: [Trigger!]!
  translations: TranslationConfig!
  meta: NodeMetaConfig!
  path: [String!]!

  children: [ProjectDefinitionNode!]!
  translated: [Translation!]!
  validator: JsonSchema
}

type ProjectDefinitionTreeNode {
  definition: ProjectDefinitionNode!
  children: [ProjectDefinitionTreeNode!]!
}

type ProjectDefinitionNodeTree {
  roots: [ProjectDefinitionTreeNode!]!
}

type ProjectDefinition {
  id: ID!
  name: String!
  rootSections: ProjectDefinitionNodeTree!
  rootSectionContainers(rootSectionId: ID!): ProjectDefinitionNodeTree!
  formContent(formId: ID!): ProjectDefinitionNodeTree!
}

type ProjectDefinitionEdge {
  node: ProjectDefinition!
  cursor: String!
}

type ProjectDefinitionConnection {
  edges: [ProjectDefinitionEdge!]!
  pageInfo: PageInfo!
}

type Formula {
  id: ID!
  projectDefinitionId: String!
  attachedToTypeId: String!
  name: String!
  expression: String!
}

type FormulaEdge {
  node: Formula!
  cursor: String!
}

type FormulaConnection {
  edges: [FormulaEdge!]!
  pageInfo: PageInfo!
}

type ProjectEdge {
  node: ProjectDetails!
  cursor: String!
}

type ProjectConnection {
  edges: [ProjectEdge!]!
  pageInfo: PageInfo!
}

type ProjectNode {
  id: ID!
  projectId: String!
  typePath: [String!]!
  typeId: String!
  typeName: String!
  path: [String!]!
  value: PrimitiveWithReferenceUnion
  label: String
}

type ProjectDetails {
  id: ID!
  name: String!
  projectDefinitionId: String!
  projectDefinition: ProjectDefinition!
  datasheetId: String!
  datasheet: Datasheet!
  reportDefinitions: [ReportDefinition!]!
}

input ProjectDetailsInput {
  id: ID!
  name: String!
  projectDefinitionId: String!
  datasheetId: String!
}

type ProjectNodeMeta {
  definition: ProjectDefinitionNode!
  state: ProjectNodeMetaState!
  typeId: ID!
  translations: [Translation!]!
}

type ProjectNodeMetaState {
  isVisible: Boolean
  selectedChild: String
}

type ProjectNodeTreeNode {
  node: ProjectNode!
  children: [ProjectNodeTreeTypeNode!]!
}

type ProjectNodeTreeTypeNode {
  definition: ProjectDefinitionNode!
  state: ProjectNodeMetaState!
  nodes: [ProjectNodeTreeNode!]!
}

type ProjectNodeTree {
  roots: [ProjectNodeTreeTypeNode!]!
}

type AttributeBucket {
  bucketName: String!
  attributeName: String!
}

type ReportComputation {
  name: String!
  expression: String!
  isVisible: Boolean!
  unitId: String
}

type ReportDefinitionStructure {
  formulaAttribute: AttributeBucket!
  datasheetAttribute: AttributeBucket!
  columns: [ReportComputation!]!
}

type ReportDefinition {
  id: String!
  projectDefinitionId: String!
  name: String!
  structure: ReportDefinitionStructure!
}

type ReportRow {
  nodeId: String!
  formulaId: String!
  elementDefId: String!
  childReferenceId: String!
  columns: [ComputedValue!]!
}

type ComputedValue {
  label: String!
  value: PrimitiveWithReferenceUnion!
  unit: String
  isVisible: Boolean!
}

type StageColumn {
  label: String!
  unit: String
  isVisible: Boolean!
}

type ReportStage {
  summary: ComputedValue!
  columns: [StageColumn!]!
  rows: [ReportRow!]!
}

type Report {
  name: String!
  datasheetId: String!
  stages: [ReportStage!]!
  creationDateUtc: String
  summaries: [ComputedValue!]!
}

type SuppliedItem {
  datasheetId: String!
  elementDefId: String!
  childReferenceId: String!
  organizationId: String!
  organization: Organization!
}

type DistributableItem {
  id: String!
  projectId: String!
  reportDefinitionId: String!
  nodeId: String!
  formulaId: String!
  suppliedItem: SuppliedItem!
  distribution_ids: [String!]!
  summary: ComputedValue!
  columns: [ComputedValue!]!
  obsolete: Boolean!
  creationDateUtc: String!
}

type Translation {
  id: ID!
  ressourceId: String!
  locale: String!
  scope: String!
  name: String!
  value: String!
}

type TranslationEdge {
  node: Translation!
  cursor: String!
}

type TranslationConnection {
  edges: [TranslationEdge!]!
  pageInfo: PageInfo!
}

type PageInfo {
  hasNextPage: Boolean!
  endCursor: String!
  totalCount: Int!
}

type Organization {
  id: String!
  name: String!
  email: String!
}

type User {
  oauthId: ID!
  id: String!
  email: String!
  permissions: [String!]!
  organizationId: String!
}

input NewSingleUserOrganizationInput {
  organizationName: String!
  email: String!
}

type Query {
  currentUser: User
  units: [Unit!]!

  # Aggregates
  findAggregates(
    projectDefinitionId: ID!
    collectionId: ID!
    query: String!
    first: Int!
    after: String
  ): AggregateConnection!

  # Aggregates collection
  findAggregateCollection(
    projectDefinitionId: ID!
    collectionId: ID!
  ): AggregateCollection!
  findDefinitionAggregateCollections(
    projectDefinitionId: ID!
  ): [AggregateCollection!]!

  # ProjectDefinition
  findDefinitionFormulaFieldMix(
    projectDefinitionId: ID!
    query: String!
    first: Int!
    after: String
  ): CoreDefinitionNodeConnection!

  # Formula
  findFormula(projectDefinitionId: ID!, formulaId: ID!): Formula

  # Datasheet
  findDatasheet(id: ID!): Datasheet!
  findDatasheets(
    query: String!
    first: Int!
    after: String
  ): DatasheetConnection!
  findProjectDefinition(id: ID!): ProjectDefinition!
  findProjectDefinitionRootSections(
    projectDefinitionId: ID!
  ): ProjectDefinitionNodeTree!
  findProjectDefinitionRootSectionContainers(
    projectDefinitionId: ID!
    rootSectionId: ID!
  ): ProjectDefinitionNodeTree!
  findProjectDefinitionFormContent(
    projectDefinitionId: ID!
    formId: ID!
  ): ProjectDefinitionNodeTree!
  findProjectDefinitionNode(
    projectDefinitionId: ID!
    id: ID!
  ): ProjectDefinitionNode!
  findRessourceTranslation(
    ressourceId: ID!
    language: String!
  ): TranslationConnection!
  findProjectDefintions(
    query: String!
    first: Int!
    after: String
  ): ProjectDefinitionConnection!
  findProjectRootSections(projectId: ID!): ProjectNodeTree!
  findProjectRootSectionContainers(
    projectId: ID!
    rootSectionId: ID!
  ): ProjectNodeTree!
  findProjectNodeMetaDefinition(projectId: ID!, nodeId: ID!): ProjectNodeMeta!
  findProjectFormContent(projectId: ID!, formId: ID!): ProjectNodeTree!
  findProjects(query: String!, first: Int!, after: String): ProjectConnection!
  findProjectDetails(id: ID!): ProjectDetails!
  findProjectDefinitionFormulas(
    projectDefinitionId: ID!
    query: String!
    first: Int!
    after: String
  ): FormulaConnection!
  findReportDefinitions(projectDefinitionId: ID!): [ReportDefinition!]!
  findReportDefinition(reportDefinitionId: ID!): ReportDefinition!
  findProjectReport(projectId: ID!, reportDefinitionId: ID!): Report!

  # CommandOrder
  findDistributables(projectId: ID!): [ReportDefinition!]!
  findDistributableItems(
    projectId: ID!
    reportDefinitionId: ID!
  ): [DistributableItem!]!
}

input TranslationInput {
  locale: String!
  name: String!
  value: String!
}

input TranslationUpdateInput {
  ressourceId: String!
  scope: String!
  locale: String!
  name: String!
  value: String!
}

input FieldUpdateInput {
  nodeId: ID!
  value: FieldValueInput!
}

input ProjectNodeCollectionTargetInput {
  parentNodeId: String
  collectionTypeId: String!
}

input DatasheetInput {
  name: String!
  projectDefinitionId: String!
  fromDatasheetId: String
}

input DefinitionInput {
  name: String!
}

type Mutation {
  # Translations
  updateTranslations(translations: [TranslationUpdateInput!]!): [Translation!]!

  # ProjectDefinition
  addProjectDefinition(definitionInput: DefinitionInput!): ProjectDefinition!

  # Aggregate Collection
  addAggregateCollection(
    projectDefinitionId: ID!
    collection: AggregateCollectionInput!
  ): AggregateCollection!
  updateAggregateCollection(
    projectDefinitionId: ID!
    collectionId: ID!
    collection: AggregateCollectionInput!
  ): AggregateCollection!
  deleteAggregateCollection(
    projectDefinitionId: ID!
    collectionId: ID!
  ): String!

  # Aggregate
  addAggregate(
    projectDefinitionId: ID!
    collectionId: ID!
    aggregate: AggregateInput!
  ): Aggregate!
  updateAggregate(
    projectDefinitionId: ID!
    collectionId: ID!
    aggregateId: ID!
    replacement: AggregateInput!
  ): Aggregate!
  deleteAggregate(
    projectDefinitionId: ID!
    collectionId: ID!
    aggregateId: ID!
  ): String!

  # ProjectDefinitionNode
  addProjectDefinitionNode(
    projectDefinitionId: ID!
    node: ProjectDefinitionNodeCreationInput!
  ): ProjectDefinitionNode!

  updateProjectDefinitionNode(
    projectDefinitionId: ID!
    nodeId: ID!
    node: ProjectDefinitionNodeCreationInput!
  ): ProjectDefinitionNode!
  deleteProjectDefinitionNode(projectDefinitionId: ID!, nodeId: ID!): String!

  # ProjectNode
  updateProjectField(
    projectId: ID!
    nodeId: ID!
    value: FieldValueInput!
  ): ProjectNode!
  updateProjectFields(
    projectId: ID!
    updates: [FieldUpdateInput!]!
  ): [ProjectNode]!

  deleteProjectCollection(projectId: ID!, collectionNodeId: ID!): ProjectNode!
  cloneProjectCollection(projectId: ID!, collectionNodeId: ID!): [ProjectNode!]!
  addProjectCollectionItem(
    projectId: ID!
    collectionTarget: ProjectNodeCollectionTargetInput!
  ): [ProjectNode!]!

  # Project
  createProject(projectDetails: ProjectDetailsInput): ProjectDetails!

  # Datasheet
  createDatasheet(datasheet: DatasheetInput): Datasheet!

  # User
  createSingleUserOrganization(
    singleUserOrganization: NewSingleUserOrganizationInput!
  ): User!
}

schema {
  query: Query
  mutation: Mutation
}
